# This is the Jolla-modified configdefaults for SFOS

# Enabled checks for the rpmlint to be run
Checks = [
    "AppDataCheck",
    "BinariesCheck",
    "BuildDateCheck",
    'BuildRootCheck',
    "ConfigFilesCheck",
    "DBusPolicyCheck",
    'DuplicatesCheck',
    "DocCheck",
    "FHSCheck",
    "FilesCheck",
    "IconSizesCheck",
    "InitScriptCheck",
    "I18NCheck",
    "LogrotateCheck",
    "MenuCheck",
    "MenuXDGCheck",
    "NamingPolicyCheck",
    "PkgConfigCheck",
    "PostCheck",
    "SignatureCheck",
    "SourceCheck",
    "SpecCheck",
    "TagsCheck",
    "ZipCheck",
    # Added for SFOS but disabled for now
    # "DesktopTranslationCheck",
    # "LibraryPolicyCheck",
    # "CheckIconSizes",
    # "CheckStaticLibraries",
    # polkit-default-privs would need to be installed always
    # "CheckPolkitPrivs",
    # "CheckDBUSServices",
    # "CheckAlternativesGhostFiles",
    # "CheckGNOMEMacros",
]
# Various output filters, list of regexp strings eg. "E: .* no-signature"
Filters = []
# Treshold where we should error out, by default single error is enough
BadnessThreshold = -1
# When checking that various files that should be compressed are
# indeed compressed, look for this filename extension
CompressExtension = "bz2"
# Base directory where to extract uninstalled packages while checking
# Default is to use mktemp from python to provide one
ExtractDir = ""
# Regexp string for words that must never exist in preamble tag values
ForbiddenWords = ""
# Accepted non-XDG legacy icon filenames, string regexp format
IconFilename = '.*\.png$'
# Regexp string to disallow in various URL tags
InvalidURL = ""
# Whether to allow packaging kernel modules in non-kernel packages.
KernelModuleRPMsOK = true
# Maximum allowed line length for Summary and Description tags
MaxLineLength = 79
# Regexp string with names of packages to treat as "meta" ones.
MetaPackageRegexp = '^(bundle|task)-'
# String regexp validating value for the Packager tag.
Packager = ""
# Assumed default version of Python if one cannot be determined from files
PythonDefaultVersion = ""
# Trick in perl version handling
PerlVersionTrick = true
# Regexp string with expected suffix in Release tags.
ReleaseExtension = ""
# Regexp string with allowed Group tag for games
RpmGamesGroup = "Games"
# Doc files to which end of line and UTF-8 checks should not be applied
SkipDocsRegexp = '\.(?:rtf|x?html?|svg|ml[ily]?)$'
# Whether to use the Enchant spell checker for spell checking
UseEnchant = false
# Whether debug sources are expected to be in separate packages from
# -debuginfo, typically -debugsource.
UseDebugSource = false
# Whether an explicit Epoch should always be specified in preamble
UseEpoch = false
# Whether to want default start/stop runlevels specified in init scripts
UseDefaultRunlevels = true
# Whether symlinks between directories should be relative.
UseRelativeSymlinks = true
# Whether %changelog entries should contain a version
UseVersionInChangelog = true
# Whether init scripts must use /var/lock/subsys
UseVarLockSubsys = true
# Regexp string with value for the BuildHost preamble tag
ValidBuildHost = ''
# Standard "needs" values for non-XDG legacy menu items
ExtraMenuNeeds = [
    "gnome",
    "icewm",
    "kde",
    "wmaker",
]
# Regexp string with exceptions for hardcoded library paths.
HardcodedLibPathExceptions = '/lib/(modules|cpp|perl5|rpm|hotplug|firmware|systemd)($|[\s/,])'
# Values for non-XDG legacy menu item sections
ValidMenuSections = [
	"Amusements/Games" ,
	"Amusements/Graphics" ,
	"Applications/Archiving" ,
	"Applications/Communications" ,
	"Applications/Databases" ,
	"Applications/Editors" ,
	"Applications/Emulators" ,
	"Applications/Engineering" ,
	"Applications/File" ,
	"Applications/Internet" ,
	"Applications/Multimedia" ,
	"Applications/Productivity" ,
	"Applications/Publishing" ,
	"Applications/System" ,
	"Applications/Text" ,
	"Development/Debuggers" ,
	"Development/Languages" ,
	"Development/Libraries" ,
	"Development/System" ,
	"Development/Tools" ,
	"Documentation" ,
	"System/Boot" ,
	"System/Console" ,
	"System/I18n/Chinese" ,
	"System/I18n/Japanese" ,
	"System/I18n/Korean" ,
	"System/Packages" ,
	"System/Base" ,
	"System/Daemons" ,
	"System/Kernel" ,
	"System/Libraries" ,
	"System/Shells" ,
	"System/X11" ,
	"System/X11/Fonts" ,
	"System/X11/Icons" ,
	"System/GUI/XFCE" ,
	"System/GUI/Other" ,
	"System/GUI/GNOME" ,
	"Communications/Cellular Adaptation" ,
	"Communications/Cellular Framework" ,
	"Communications/Telephony and IM" ,
	"Communications/Bluetooth" ,
	"Communications/Connectivity Adaptation" ,
	"Communications/ConnMan" ,
	"Data Management/Content Framework" ,
	"Development Platform/Platform SDK" ,
	"Graphics/Font Management" ,
	"Graphics/Display and Graphics Adaptation" ,
	"Graphics/Input Adaptation" ,
	"Graphics/Open GL ES" ,
	"Graphics/X11" ,
	"Kernel/Linux Kernel" ,
	"Location/Location Framework" ,
	"Location/Location Adaptation" ,
	"Multimedia/Audio Adaptation" ,
	"Multimedia/Camera Adaptation" ,
	"Multimedia/Gstreamer" ,
	"Multimedia/Imaging and Video Adaptation" ,
	"Multimedia/Imaging Codecs" ,
	"Multimedia/PulseAudio" ,
	"Multimedia/Sharing" ,
	"Multimedia/UPnP" ,
	"Personal Information Management/Backup Framework" ,
	"Personal Information Management/Calendar Engine" ,
	"Personal Information Management/Contacts Engine" ,
	"Personal Information Management/Email Engine" ,
	"Personal Information Management/Synchronization Framework" ,
	"Qt/Qt" ,
	"Qt/Qt Mobility" ,
	"Qt/Qt WebKit" ,
	"Security/Accounts" ,
	"Security/Certificate Manager" ,
	"Security/Integrity Protection Framework" ,
	"Security/Access Control Framework" ,
	"Security/Single Sign-On" ,
	"Security/SW Distribution Security" ,
	"Security/Security Adaptation" ,
	"Software Management/Package Manager" ,
	"System/Context Framework" ,
	"System/NGF" ,
	"System/Resource Policy" ,
	"System/Sensor Adaptation" ,
	"System/Sensor Framework" ,
	"System/Startup Services" ,
	"System/System Control" ,
	"System/Device Mode Adaptation" ,
	"System/Vibra and Haptics Adaptation" ,
]
# Disallowed Runtime dependencies
InvalidRequires = [
    '^is$',
    '^not$',
    '^owned$',
    '^by$',
    '^any$',
    '^package$',
    '^libsafe\.so\.',
]
# List of directory prefixes that are not allowed in packages
DisallowedDirs = [
    "/home",
    "/mnt",
    "/opt",
    "/proc",
    "/run",
    "/tmp",
    "/usr/local",
    "/usr/tmp",
    "/var/local",
    "/var/lock",
    "/var/run",
    "/var/tmp",
]
# Standard OS groups
StandardGroups = [
    "root",
    "bin",
    "daemon",
    "adm",
    "lp",
    "sync",
    "shutdown",
    "halt",
    "mail",
    "news",
    "uucp",
    "man",
    "nobody",
]
# Standard OS users
StandardUsers = [
    "root",
    "bin",
    "daemon",
    "adm",
    "lp",
    "sync",
    "shutdown",
    "halt",
    "mail",
    "news",
    "uucp",
    "operator",
    "man",
    "nobody",
]
# List of directories considered to be system default library search paths.
SystemLibPaths = [
    "/lib",
    "/usr/lib",
    "/usr/X11R6/lib",
    "/lib64",
    "/usr/lib64",
    "/usr/X11R6/lib64",
]
# Regexp string with executables that must be compiled as position independent
PieExecutables = ''
# Architecture dependent paths in which packages are allowed to install files
# even if they are all non-binary
UsrLibBinaryException = '^/usr/lib(64)?/(perl|python|ruby|menu|pkgconfig|ocaml|lib[^/]+\.(so|l?a)$|bonobo/servers/|\.build-id|firmware)'
# Interpreters whose scriptlets are allowed to be empty
ValidEmptyShells = [
    "/sbin/ldconfig",
]
# Package scriptlet interpreters
ValidShells = [
    "<lua>",
    "/bin/sh",
    "/bin/bash",
    "/sbin/sash",
    "/usr/bin/perl",
    "/sbin/ldconfig",
]
# Man page warning category, passed to groff -w while checking man pages.
# See the groff(1) or troff(1) man pages for available categories.
ManWarningCategory = "mac"
# Values for the Group tag, if not specified pulled from RPM
ValidGroups = []
# Permissions for files in source packages
ValidSrcPerms = [
    "0o644",
    "0o755",
]
# Valid values for the License tag
ValidLicenses = []

# Default valid license exceptions
ValidLicenseExceptions = []

# Default white list for PAM modules
PAMModulesWhiteList = []

# Don't exit with an error code
TreatErrorsAsWarnings = true

# Additional warnings on specific function calls
[WarnOnFunction]
#[WarnOnFunction.testname]
#f_name = ""
#good_param = ""
#description = ""
# Set badness tweaking for various options
[Scoring]
#function=0

# Paths in which non-XDG legacy icons should be installed
[IconPath]
[IconPath."/usr/share/icons/"]
path = "/usr/share/icons/"
type = "normal"
[IconPath."/usr/share/icons/mini"]
path = "/usr/share/icons/mini"
type = "mini"
[IconPath."/usr/share/icons/large"]
path = "/usr/share/icons/large"
type = "large"

# Default known application launchers for desktop entries
[MenuLaunchers]
[MenuLaunchers.kdesu]
regexp = '(?:/usr/bin/)?kdesu'
binaries = ['/usr/bin/kdesu', 'kdesu']
[MenuLaunchers.x11_clanapp]
regexp = '(?:/usr/bin/)?launch_x11_clanapp'
binaries = ['/usr/bin/launch_x11_clanapp', 'clanlib', 'libclanlib0']
[MenuLaunchers.soundwrapper]
regexp = '(?:/usr/bin/)?soundwrapper'
binaries = false

# Exception list for dangling symlink checks.  The first in each pair
# is a regexp, and the second the package in which the target of the
# dangling symlink is shipped
[DanglingSymlinkExceptions]
